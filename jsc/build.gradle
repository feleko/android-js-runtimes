// Inherit group & version from root
//version '1.0.0'

buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'com.github.kezong:fat-aar:1.3.8'
    }
}


repositories {
    google()
    mavenCentral()
    maven {
        // Local Maven repo containing AAR with JSC library (single revision)
        url "$projectDir/../download-jsc/libs/250231.0.0/package/dist"
    }
}

apply plugin: 'com.kezong.fat-aar'

android {
    namespace "com.github.feleko.android_js_runtimes.jsc"

    packagingOptions {
        pickFirst '**/libjsc.so'
        pickFirst '**/libc++_shared.so'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildTypes {
        release {
            // Include full debug symbols for native crash symbolication
            if (this.hasProperty('debugSymbolLevel')) {
                debugSymbolLevel 'FULL'
            }
        }
    }

    defaultConfig {
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"//, "-DANDROID_ARM_NEON=TRUE"

            }

        }
    }

    // Ensure we can add generated jniLibs (libc++_shared.so) copied from NDK
    sourceSets {
        main {
            jniLibs.srcDirs += ["$buildDir/generated/jniLibs"]
        }
    }
}

// Copy libc++_shared.so from the local NDK into a generated jniLibs folder so that
// the produced fat AAR contains the C++ runtime required by libjsc.so. Without this
// the app can crash at runtime with: dlopen failed: library "libc++_shared.so" not found.
def abiList = ["armeabi-v7a", "arm64-v8a", "x86", "x86_64"]
tasks.register('bundleLibCppShared') {
    doLast {
        def ndkDir = android.ndkDirectory
        if (!ndkDir || !ndkDir.exists()) {
            throw new GradleException("NDK directory not found. Required to bundle libc++_shared.so")
        }
        abiList.each { abi ->
            def src = new File(ndkDir, "sources/cxx-stl/llvm-libc++/libs/${abi}/libc++_shared.so")
            if (!src.exists()) {
                logger.warn("[jsc] libc++_shared.so not found for ABI ${abi} at ${src}. ABI will be skipped.")
            } else {
                def destDir = new File("$buildDir/generated/jniLibs/${abi}")
                destDir.mkdirs()
                project.copy { spec ->
                    spec.from(src)
                    spec.into(destDir)
                }
            }
        }
    }
}

// Make sure native libs are prepared before packaging / merging.
preBuild.dependsOn tasks.named('bundleLibCppShared')

dependencies {
    // Single JSC revision (r250231) to avoid ABI conflicts and duplicate libjsc.so
    embed "org.webkit:android-jsc:r250231"
}

// Guard task: fail build if more than one android-jsc embed dependency is present
tasks.register('verifySingleJscEmbed') {
    doLast {
        def configsToCheck = configurations.matching { it.name in ['implementation','embed','api'] }
        def allRefs = []
        configsToCheck.each { cfg ->
            cfg.allDependencies.each { dep ->
                if (dep.group == 'org.webkit' && dep.name.startsWith('android-jsc')) {
                    allRefs << "${dep.group}:${dep.name}:${dep.version ?: 'unspecified'}"
                }
            }
        }
        def unique = allRefs.unique()
        if (unique.size() > 1) {
            throw new GradleException("[verifySingleJscEmbed] Multiple android-jsc variants detected: ${unique}")
        }
        logger.lifecycle("[verifySingleJscEmbed] OK (found: ${unique})")
    }
}

preBuild.dependsOn tasks.named('verifySingleJscEmbed')
